{"config":{"title":"Primer Workflow","description":"A workflow to order primers","copyright":"University of Washington","version":"0.0.1","authors":[{"name":"Tileli Amimeur","affiliation":"University of Washington"},{"name":"Nick Bolten","affiliation":"University of Washington"},{"name":"Leandra Brettner","affiliation":"University of Washington"},{"name":"Cameron Cordray","affiliation":"University of Washington"},{"name":"Miles Gander","affiliation":"University of Washington"},{"name":"Samer Halabiya","affiliation":"University of Washington"},{"name":"Seunghee Jang","affiliation":"University of Washington"},{"name":"Yokesh Jayakumar","affiliation":"University of Washington"},{"name":"Benjamin Keller","affiliation":"University of Washington"},{"name":"Erriberto Lopez","affiliation":"University of Washington"},{"name":"Jon Luntzel","affiliation":"University of Washington"},{"name":"Abraham Miller","affiliation":"University of Washington"},{"name":"Garrett Newman","affiliation":"University of Washington"},{"name":"Michelle Parks","affiliation":"University of Washington"},{"name":"Sundipta Rao","affiliation":"University of Washington"},{"name":"Ayesha Saleem","affiliation":"University of Washington"},{"name":"Devin Strickland","affiliation":"University of Washington"},{"name":"Chris Takahashi","affiliation":"University of Washington"},{"name":"Yaoyu Yang","affiliation":"University of Washington"},{"name":"David Younger","affiliation":"University of Washington"}],"maintainer":{"name":"Ben Keller","email":"bjkeller@uw.edu"},"acknowledgements":null,"github":{"user":"bjkeller","repo":"primer-workflow","organization":"klavinslab"},"keywords":null,"aquadoc_version":"1.0.0","aquarium_version":"\u003c%= Bioturk::Application.config.aquarium_version %\u003e"},"components":[{"sample_types":[{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2019-02-27T10:21:04.000-08:00","updated_at":"2019-02-27T10:21:04.000-08:00","field_types":[{"id":1,"parent_id":1,"name":"Overhang Sequence","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2019-02-27T10:21:04.000-08:00","updated_at":"2019-02-27T10:21:04.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2,"parent_id":1,"name":"Anneal Sequence","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2019-02-27T10:21:04.000-08:00","updated_at":"2019-02-27T10:21:04.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3,"parent_id":1,"name":"T Anneal","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2019-02-27T10:21:04.000-08:00","updated_at":"2019-02-27T10:21:04.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":3,"name":"Primer Stock","description":"rehydrated  primer in tube","min":0,"max":1000,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2019-02-27T10:21:04.000-08:00","updated_at":"2019-02-27T10:21:04.000-08:00","unit":"Primer","cost":0.01,"release_method":"return","release_description":"","sample_type_id":1,"image":null,"prefix":"M20","rows":null,"columns":null,"sample_type_name":"Primer"},{"id":4,"name":"Primer Aliquot","description":"Primers at low concentration (10uM) for every day use","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"{ \"measure\": { \"type\": \"concentration\", \"unit\": \"micromolar\" } }","vendor":"No vendor information","created_at":"2019-02-27T10:21:04.000-08:00","updated_at":"2019-03-13T09:23:59.000-07:00","unit":"Primer","cost":0.01,"release_method":"return","release_description":"","sample_type_id":1,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"Primer"}],"operation_type":{"name":"Make Primer Aliquot","category":"Cloning","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"Stock","sample_types":["Primer"],"object_types":["Primer Stock"],"part":false,"array":false,"routing":"P","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"sample","role":"output","name":"Aliquot","sample_types":["Primer"],"object_types":["Primer Aliquot"],"part":false,"array":false,"routing":"P","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# frozen_string_literal: true\n\n# Make Primer Aliquot protocol.\n#\n# For each input primer stock, transfers 10 uL of stock into 90 uL of water in\n# a 1.5 mL tube.\nclass Protocol\n  def main\n    operations.retrieve.make\n\n    gather_tubes(\n      count: operations.length,\n      aliquot_ids: operations.map { |op| op.output('Aliquot').item.id }\n    )\n    create_aliquots(operations)\n\n    operations.store\n  end\n\n  # Gather and prepare tubes for new aliquots.\n  #\n  # @param count [FixNum] the number of tubes to prepare\n  # @param aliquot_ids [Array\u003cFixNum\u003e] the item IDs to label tubes\n  def gather_tubes(count:, aliquot_ids:)\n    show do\n      title 'Prepare aliquot tubes'\n\n      note \"Grab #{count} 1.5 mL tubes\"\n      note \"Label each tube with the following ids: #{aliquot_ids.to_sentence}\"\n      note 'Using the 100 uL pipette, pipette 90uL of water into each tube'\n    end\n  end\n\n  # Displays instructions to transfer 10 uL of primer stock into the tube with\n  # the corresponding label.\n  #\n  # @param operations [OperationList] the operations specifying transfer\n  def create_aliquots(operations)\n    show do\n      title 'Transfer primer stock into primer aliquot'\n\n      note 'Pipette 10 uL of the primer stock into a tube according to the following table:'\n      table operations\n        .start_table\n        .input_item('Stock')\n        .output_item('Aliquot', checkable: true)\n        .end_table\n    end\n  end\nend\n","precondition":"def precondition(op)\n  true\nend","cost_model":"def cost(op)\n  { labor: 0.40, materials: 0.06 }\nend","documentation":"name: Make Primer Aliquot\n---\n\ncategory: Cloning\n---\n\nThis protocol uses an existing Primer stock in inventory to make a 1:10 diluted 100L aliquot of that primer.\n\n\n## Arguments\n\n- `Stock` \u0026mdash; input primer stock\n\n## Parameters\n\n_None_\n\n## Output\n\n- `Aliquot` \u0026mdash; the output 1:10 diluted primer aliquot.\n\n## Shared (Blackboard) attributes\n\n_None_\n\n## Data associations\n\n_None_\n\n### Item associations\n\n_None_\n\n### Operation associations\n\n_None_\n\n### Plan associations\n\n_None_\n\n## Equipment\n\n_None_\n\n## Supplies\n\n_None_\n\n\n\n\n\n\n\n\n\n\n","timing":null}},{"sample_types":[{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2019-02-27T10:21:04.000-08:00","updated_at":"2019-02-27T10:21:04.000-08:00","field_types":[{"id":1,"parent_id":1,"name":"Overhang Sequence","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2019-02-27T10:21:04.000-08:00","updated_at":"2019-02-27T10:21:04.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2,"parent_id":1,"name":"Anneal Sequence","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2019-02-27T10:21:04.000-08:00","updated_at":"2019-02-27T10:21:04.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3,"parent_id":1,"name":"T Anneal","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2019-02-27T10:21:04.000-08:00","updated_at":"2019-02-27T10:21:04.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":5,"name":"Lyophilized Primer","description":"Some barely visible white powder","min":1,"max":10000,"handler":"sample_container","safety":"","cleanup":"","data":"","vendor":"","created_at":"2019-02-27T10:21:04.000-08:00","updated_at":"2019-02-27T10:21:04.000-08:00","unit":"tube","cost":5.0,"release_method":"return","release_description":"","sample_type_id":1,"image":null,"prefix":"","rows":null,"columns":null,"sample_type_name":"Primer"}],"operation_type":{"name":"Order Primer","category":"Cloning","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"output","name":"Primer","sample_types":["Primer"],"object_types":["Lyophilized Primer"],"part":false,"array":false,"routing":"P","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"string","role":"input","name":"Urgent?","sample_types":[],"object_types":[],"part":false,"array":false,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# frozen_string_literal: true\n\nneeds 'Standard Libs/Feedback'\nneeds 'Cloning/PrimerModel'\nneeds 'Cloning/Vendor'\n\nclass Protocol\n  include Feedback\n  include PrimerModel\n\n  def main\n    operations.retrieve.make\n\n    vendor = Vendor.determine_vendor\n    vendor.login\n\n    primers = operations.map { |op| create_primer(output: op.output('Primer')) }\n    order_number = vendor.order_primers(primers)\n    add_order_number(operations: operations, order_number: order_number)\n\n    get_protocol_feedback\n    {}\n  end\n\n  def create_primer(output:)\n    Primer.new(sample: output.sample)\n  end\n\n  def add_order_number(operations:, order_number:)\n    unless order_number.nil?\n      operations.each do |op|\n        op.set_output_data('Primer', :order_number, order_number)\n      end\n    end\n  end\nend\n","precondition":"def precondition(op)\n  return true\n  \n  pending_orders = Operation.where(\"status = ? \u0026\u0026 operation_type_id IN (?)\", \"pending\", OperationType.where(\"name = 'Order Primer'\").map { |order| order.id })\n  total_cost = pending_orders.inject(0) { |sum, order| sum + order.nominal_cost[:materials] }\n  \n  if (op.input(\"Urgent?\").val.downcase == \"yes\" ||\n     pending_orders.any? { |order| order.input(\"Urgent?\").val.downcase == \"yes\" } ||\n     total_cost \u003e 50 ) \u0026\u0026 op.output(\"Primer\").sample.properties[\"Overhang Sequence\"] \u0026\u0026 op.output(\"Primer\").sample.properties[\"Anneal Sequence\"]\n      return true\n  end\n  \n  return false\nend","cost_model":"# Kilroy was here 2017-09-22 18:54:13\ndef cost(op)\n    \n  props = op.output(\"Primer\").sample.properties\n  seq = props[\"Overhang Sequence\"] + props[\"Anneal Sequence\"]\n  n = seq.length\n  \n  if n \u003c= 60\n    c = n * Parameter.get_float('short primer cost')\n  elsif n \u003c= 90\n    c = n * Parameter.get_float('medium primer cost')\n  else\n    c = n * Parameter.get_float('long primer cost')\n  end\n  \n  { labor: 1.8, materials: c }\n  \nend","documentation":"# OrderPrimer\n\nDisplays instructions to order DNA oligos for the specified output primer from a vendor.\n\nIndicate whether the order is urgent using the `Urgent?` parameter.\n\nCurrently supported vendors are IDT and Sigma-Aldrich.\nUse the **Parameters** menu to set the user and password for the vendor(s) you want to be able to use.\nSet values for `IDT User` and `IDT Password` for IDT; and `Sigma-Aldrich User` and `Sigma-Aldrich Password` for Sigma-Aldrich.\n\nSee the `Cloning/Vendor` library to add a vendor.\n","timing":{"start":960,"stop":990,"days":"[\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\"]","active":true}}},{"sample_types":[{"id":1,"name":"Primer","description":"A short double stranded piece of DNA for PCR and sequencing","created_at":"2019-02-27T10:21:04.000-08:00","updated_at":"2019-02-27T10:21:04.000-08:00","field_types":[{"id":1,"parent_id":1,"name":"Overhang Sequence","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2019-02-27T10:21:04.000-08:00","updated_at":"2019-02-27T10:21:04.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2,"parent_id":1,"name":"Anneal Sequence","ftype":"string","choices":null,"array":false,"required":true,"created_at":"2019-02-27T10:21:04.000-08:00","updated_at":"2019-02-27T10:21:04.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":3,"parent_id":1,"name":"T Anneal","ftype":"number","choices":null,"array":false,"required":true,"created_at":"2019-02-27T10:21:04.000-08:00","updated_at":"2019-02-27T10:21:04.000-08:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":5,"name":"Lyophilized Primer","description":"Some barely visible white powder","min":1,"max":10000,"handler":"sample_container","safety":"","cleanup":"","data":"","vendor":"","created_at":"2019-02-27T10:21:04.000-08:00","updated_at":"2019-02-27T10:21:04.000-08:00","unit":"tube","cost":5.0,"release_method":"return","release_description":"","sample_type_id":1,"image":null,"prefix":"","rows":null,"columns":null,"sample_type_name":"Primer"},{"id":4,"name":"Primer Aliquot","description":"Primers at low concentration (10uM) for every day use","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"{ \"measure\": { \"type\": \"concentration\", \"unit\": \"micromolar\" } }","vendor":"No vendor information","created_at":"2019-02-27T10:21:04.000-08:00","updated_at":"2019-03-13T09:23:59.000-07:00","unit":"Primer","cost":0.01,"release_method":"return","release_description":"","sample_type_id":1,"image":"","prefix":"M20","rows":null,"columns":null,"sample_type_name":"Primer"},{"id":3,"name":"Primer Stock","description":"rehydrated  primer in tube","min":0,"max":1000,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2019-02-27T10:21:04.000-08:00","updated_at":"2019-02-27T10:21:04.000-08:00","unit":"Primer","cost":0.01,"release_method":"return","release_description":"","sample_type_id":1,"image":null,"prefix":"M20","rows":null,"columns":null,"sample_type_name":"Primer"}],"operation_type":{"name":"Rehydrate Primer","category":"Cloning","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"Primer","sample_types":["Primer"],"object_types":["Lyophilized Primer"],"part":false,"array":false,"routing":"P","preferred_operation_type_id":328,"preferred_field_type_id":1811,"choices":null},{"ftype":"sample","role":"output","name":"Primer Aliquot","sample_types":["Primer"],"object_types":["Primer Aliquot"],"part":false,"array":false,"routing":"P","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"sample","role":"output","name":"Primer Stock","sample_types":["Primer"],"object_types":["Primer Stock"],"part":false,"array":false,"routing":"P","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# frozen_string_literal: true\n\nneeds 'Standard Libs/Feedback'\nneeds 'Cloning/PrimerModel'\n\n# Rehydrate Primers protocol.\n# Takes a primer and hydrates it yielding a primer aliquot and stock.\n#\n# Note: this protocol assumes details about vendor labeling that may be\n# IDT-specific.\n#\nclass Protocol\n  include Feedback\n  include PrimerModel\n\n  def main\n    operations.retrieve interactive: false\n    operations.make\n\n    spin_down_primers(operations)\n    get_primer_nm(operations)\n\n    rehydrate_primers(operations)\n    aliquot_ids = operations.map do |op|\n      op.output('Primer Aliquot').item.id\n    end\n    prepare_aliquot_tubes(tube_ids: aliquot_ids)\n    vortex_and_centrifuge(count: operations.length)\n    make_aliquots(operations)\n\n    operations.each { |op| op.input('Primer').item.mark_as_deleted }\n    operations.store\n\n    get_protocol_feedback\n    {}\n  end\n\n  # Display instructions to spin down the primers\n  #\n  # @param primers [Array\u003cItem\u003e] the input primers\n  def spin_down_primers(_primers)\n    show do\n      title 'Quick spin down all the primer tubes'\n      note 'Put all the primer tubes in a table top centrifuge to spin down for 3 seconds.'\n      warning 'Make sure to balance!'\n    end\n  end\n\n  # Displays the primers and for each asks for the nMoles of primer on the tube\n  # label. Stores the measurement in `operation.temporary[:n_moles]`\n  def get_primer_nm(operations)\n    show do\n      title 'Enter the nMoles of the primer'\n\n      note 'Enter the number of moles for each primer, in nM. This is written toward the bottom of the tube, below the MW.'\n      note \"The ID of the primer is listed before the primer's name on the side of the tube.\"\n      table operations\n        .start_table\n        .input_sample('Primer')\n        .get(:n_moles, type: 'number', heading: 'nMoles', default: 10)\n        .end_table\n    end\n  end\n\n  # Displays instructions to label the primer tubes with a new ID, and then add\n  # TE to rehydrate the primer.  Adds 10uL for each nM.\n  #\n  # @param operations [OperationList] the operations with input primers\n  def rehydrate_primers(operations)\n    show do\n      title 'Label and rehydrate'\n\n      note 'Label each primer tube with the IDs shown in Primer Stock IDs and rehydrate with volume of TE shown in Rehydrate'\n      table operations\n        .start_table\n        .input_sample('Primer')\n        .output_item('Primer Stock')\n        .custom_column(heading: 'Rehydrate (uL of TE)', checkable: true) { |op| op.temporary[:n_moles] * 10 }\n        .end_table\n    end\n  end\n\n  # Displays instructions to vortex and centrifuge the rehydrated primers.\n  #\n  # @param count [Fixnum] the number of primers\n  def vortex_and_centrifuge(count:)\n    show do\n      title 'Vortex and centrifuge'\n      note 'Wait one minute for the primer to dissolve in TE.' if count \u003c 7\n      note 'Vortex each tube on table-top vortexer for 5 seconds and then quick spin for 2 seconds on table top centrifuge.'\n    end\n  end\n\n  # Displays instructions to prepare the aliquot tubes by labeling and adding\n  # 90uL of water to each.\n  #\n  # @param tube_ids [Array\u003cFixnum\u003e] the list of item IDs\n  def prepare_aliquot_tubes(tube_ids:)\n    count = tube_ids.length\n    id_string = tube_ids.map(\u0026:to_s).join(', ')\n    show do\n      title 'Prepare 1.5 mL tubes'\n\n      note 'While the primer dissolves in the TE, prepare tubes for each aliquot'\n      check \"Grab #{count} 1.5 mL tubes, label with following ids: #{id_string}\"\n      check 'Add 90 uL of water into each above tube.'\n    end\n  end\n\n  # Displays instructions to transfer 10uL of the primer stock. into each output tube.\n  #\n  # @param operations [OperationList] the operations with output primers\n  def make_aliquots(operations)\n    show do\n      title 'Make primer aliquots'\n\n      note 'Add 10 uL from each primer stock into each primer aliquot tube using the following table.'\n\n      table operations\n        .start_table\n        .output_item('Primer Stock', heading: 'Primer Stock (10 uL)')\n        .output_item('Primer Aliquot', checkable: true)\n        .end_table\n      note 'Vortex each tube after the primer has been added.'\n    end\n  end\nend\n","precondition":"def precondition(op)\n  true\nend","cost_model":"def cost(op)\n  { labor: 3.16, materials: 0.12 }\nend","documentation":"# Rehydrate Primer\n\nTakes a primer and hydrates it, yielding a primer aliquot and a primer stock.\n\nThis protocol assumes that all primers in the job are from the same order.\nIn practice, the BIOFAB ensures this by telling IDT to only send an order once\nall primers are complete.\nThis allows the lab managers to identify and schedule the appropriate job.\n","timing":{"start":690,"stop":870,"days":"[\"Mo\",\"Tu\",\"We\",\"Th\",\"Fr\"]","active":true}}},{"library":{"name":"PrimerModel","category":"Cloning","code_source":"# frozen_string_literal: true\r\n\r\n# Defines the Primer class with methods to manage the properties of primers,\r\n# such as sequence, length, priming site, etc.\r\nmodule PrimerModel\r\n  # Represents a primer object for use in protocols.\r\n  # Wraps an `Item` with sample type 'Primer'.\r\n  #\r\n  class Primer\r\n    THIS_SAMPLE_TYPE = 'Primer'\r\n    OVERHANG_SEQUENCE = 'Overhang Sequence'\r\n    ANNEAL_SEQUENCE = 'Anneal Sequence'\r\n    T_ANNEAL = 'T Anneal'\r\n    private_constant(\r\n      :THIS_SAMPLE_TYPE, :OVERHANG_SEQUENCE, :ANNEAL_SEQUENCE, :T_ANNEAL\r\n    )\r\n\r\n    attr_accessor :item, :sample, :properties\r\n\r\n    # Instantiates a new Primer.\r\n    #\r\n    # @param sample [Sample] Sample of SampleType 'Primer'\r\n    # @return [Primer]  an object for the given sample\r\n    # @raise [WrongSampleTypeError] if the sample type is not 'Primer'\r\n    def initialize(sample:)\r\n      @sample = sample\r\n\r\n      unless Primer.is_primer?(sample)\r\n        msg = \"Sample #{sample.id}, #{sample.sample_type.name}, is not a #{THIS_SAMPLE_TYPE}.\"\r\n        raise WrongSampleTypeError, msg\r\n      end\r\n\r\n      @properties = sample.properties\r\n      @item = nil\r\n    end\r\n\r\n    # Creates a Primer from the given item.\r\n    #\r\n    # @param item [Item] an Item with 'Primer' sample type\r\n    def self.from_item(item)\r\n      op = Primer.new(sample: item.sample)\r\n      op.set_item(item)\r\n      op\r\n    end\r\n\r\n    # Associates an item with this `Primer` object\r\n    #\r\n    # @param item [Item] the item to associate to this object\r\n    # @raise [WrongSampleTypeError] if the item sample type is not 'Primer'\r\n    def set_item(item)\r\n      unless Primer.is_primer?(item.sample)\r\n        msg = \"Expected item with sample type #{THIS_SAMPLE_TYPE}. \" \\\r\n              \"Got item #{item.id} with sample type #{item.sample.sample_type}\"\r\n        raise WrongSampleTypeError, msg\r\n      end\r\n\r\n      self.item = item\r\n    end\r\n\r\n    # Indicate whether a Sample is an Primer\r\n    #\r\n    # @param sample [Sample] the sample\r\n    # @return [Boolean] true if the sample is a primer, false otherwise\r\n    def self.is_primer?(sample)\r\n      sample \u0026\u0026 sample.sample_type.name == THIS_SAMPLE_TYPE\r\n    end\r\n\r\n    # Return the overhang sequence for this Primer\r\n    #\r\n    # @return [String] the overhang sequence for this Primer\r\n    def overhang_sequence\r\n      properties.fetch(OVERHANG_SEQUENCE).strip\r\n    end\r\n\r\n    # Return the anneal sequence for this Primer\r\n    #\r\n    # @return [String] the anneal sequence for this Primer\r\n    def anneal_sequence\r\n      properties.fetch(ANNEAL_SEQUENCE).strip\r\n    end\r\n\r\n    # Return the sequence for this Primer determined as the composition of the\r\n    # overhang and anneal sequences.\r\n    #\r\n    # @return the composition of the overhang and anneal sequences of this Primer\r\n    def sequence\r\n      overhang_sequence + anneal_sequence\r\n    end\r\n\r\n    # Return the length of the sequence of this Primer.\r\n    #\r\n    # @return the length of the sequence of this Primer\r\n    def length\r\n      sequence.length\r\n    end\r\n\r\n    # Return the annealing temperature of this Primer.\r\n    #\r\n    # @return the annealing temperature\r\n    def t_anneal\r\n      properties.fetch(T_ANNEAL)\r\n    end\r\n\r\n    # Computes the priming site for this Primer.\r\n    #\r\n    # @return [String] the substring for the priming site\r\n    def detect_priming_site(template:, min_length: 16, require_perfect: 3, allow_mismatch: 1)\r\n      query = last_n(require_perfect)\r\n      matches = scan(template, query)\r\n      matches.delete_if { |m| m.offset(0)[1] \u003c min_length }\r\n      return if matches.blank?\r\n\r\n      i = 0\r\n      loop do\r\n        break if matches.length \u003c= 1\r\n        i += 1\r\n        query = last_n(require_perfect + i)\r\n        matches.keep_if { |m| expand_match(template, m, i) =~ /#{query}/i }\r\n      end\r\n\r\n      _, stop = matches[0].offset(0)\r\n      return unless template[0..stop] =~ /#{last_n(stop)}/i\r\n      [0, stop]\r\n    end\r\n\r\n    # Return the last n bases of the primer sequence.\r\n    #\r\n    # @return [String] the last n bases of the primer sequence\r\n    def last_n(n)\r\n      sequence[-n..-1]\r\n    end\r\n\r\n    def scan(template, pat)\r\n      template.to_enum(:scan, /#{pat}/i).map { Regexp.last_match }\r\n    end\r\n\r\n    def expand_match(template, match, i)\r\n      start, stop = match.offset(0)\r\n      template[start - i..stop]\r\n    end\r\n  end\r\nend\r\n"}},{"library":{"name":"Vendor","category":"Cloning","code_source":"# frozen_string_literal: true\n\n# Module to manage details of ordering primers from a vendor using the `Cloning/Order Primer` protocol.\n#\n# Each vendor corresponds to a sub-module of the Vendor module implementing a\n# method `order_primer(Primer)`, where `Primer` is defined in the library `Cloning/PrimerModel`\n#\nmodule Vendor\n  # This is a hack to allow the methods of this module to create show blocks\n  class Wrapper\n    include Krill::Base\n  end\n  private_constant :Wrapper\n\n  # Returns the vendor specified by the user\n  # TODO: allow for user to specify which vendors they use with Parameters\n  def self.determine_vendor\n    vendors = %w[IDT Sigma-Aldrich]\n    #vendors = vendors.reject { |v| Parameter.get(\"#{v} User\").blank? }\n\n    vendor_show_hash = Wrapper.new.show do\n      select vendors, var: 'vendor', label: 'Select the vendor you will be ordering primers from', default: 0\n    end\n\n    if vendor_show_hash.value?('IDT')\n      IDT\n    elsif vendor_show_hash.value?('Sigma-Aldrich')\n      SigmaAldrich\n    end\n  end\n\n  # Defines common methods for primer vendors.\n  #\n  # Each vendor should have a module that includes this one.\n  module PrimerVendor\n    # will need to store information for each vendor\n\n    # Displays login instructions for the vendor's website.\n    def login_helper(url:, name:)\n      user = Parameter.get(\"#{name} User\")\n      password = Parameter.get(\"#{name} Password\")\n      Wrapper.new.show do\n        title 'Prepare to order primer'\n\n        check \"Go to the \u003ca href='#{url}'\u003e#{name} website\u003c/a\u003e, log in with the account (Username: #{user}, password is #{password}).\"\n        warning 'Ensure that you are logged in to this exact username and password!'\n      end\n    end\n\n    # creates a primer table for copy-pasting\n    def build_primer_table(primers:)\n      primers.map do |primer|\n        primer_table_entry(sample: primer.sample, sequence: primer.sequence)\n      end\n    end\n  end\n\n  # stores IDT information\n  module IDT\n    extend PrimerVendor\n\n    LOWER_LENGTH = 60\n    UPPER_LENGTH = 90\n\n    def self.login\n      login_helper(\n        url: 'https://www.idtdna.com/site/account',\n        name: 'IDT'\n      )\n    end\n\n    def self.primer_table_entry(sample:, sequence:)\n      [sample.id.to_s + ' ' + sample.name, sequence]\n    end\n\n    # Create strings containing identity of primers based on length\n    def self.build_primer_lists(primers)\n      short_primers = []\n      long_primers = []\n\n      primers.each_index do |index|\n        primer = primers[index]\n        primer_string = \"#{primer} (##{index + 1})\"\n        if primer.length \u003e LOWER_LENGTH \u0026\u0026 primer.length \u003c= UPPER_LENGTH\n          short_primers.push(primer_string)\n        elsif primer.length \u003e UPPER_LENGTH\n          long_primers.push(primer_string)\n        end\n      end\n\n      [short_primers.join(', '), long_primers.join(', ')]\n    end\n\n    # shows the primer table that was created in an earlier call and sets the output data.\n    def self.display_primer_table(primer_tab, short_primers, long_primers)\n      data = Wrapper.new.show do\n        title 'Create an IDT DNA oligos order'\n\n        warning \"Oligo concentration for primer(s) #{short_primers} will have to be set to \\\"100 nmole DNA oligo.\\\"\" if short_primers != ''\n        warning \"Oligo concentration for primer(s) #{long_primers} will have to be set to \\\"250 nmole DNA oligo.\\\"\" if long_primers != ''\n\n        check 'Under \"Custom DNA Oligos\", click \"DNA Oligos\", then click \"Order now\", and click \"Bulk input\". Copy and paste the following table there. '\n        table primer_tab\n\n        check \"Click Add to Order, review the shopping cart to double check that you entered correctly. There should be #{operations.length} primers in the cart.\"\n        check 'Click Checkout, then click Continue.'\n        check 'Enter the payment information, click the oligo card tab, select the Card1 in Choose Payment and then click Submit Order.'\n        check 'Go back to the main page, let it sit for 5-10 minutes, return and refresh, and find the order number for the order you just placed.'\n\n        get 'text', var: 'order_number', label: 'Enter the IDT order number below', default: 100\n      end\n\n      data[:order_number]\n    end\n\n    def self.order_primers(primers)\n      primer_table = build_primer_table(primers: primers)\n      short_primers, long_primers = build_primer_lists(primers)\n      order_number = display_primer_table(primer_table, short_primers, long_primers)\n\n      order_number\n    end\n  end\n\n  # stores Sigma-Aldrich information\n  module SigmaAldrich\n    extend PrimerVendor\n\n    def self.login\n      login_helper(\n        url: 'https://www.sigmaaldrich.com/webapp/wcs/stores/servlet/LogonForm?storeId=11001',\n        name: 'Sigma-Aldrich'\n      )\n    end\n\n    def self.primer_table_entry(sample:, sequence:)\n      [sample.id.to_s + ' ' + sample.name + \"\\t\" + \"None\\t\" + sequence + \"\\tNone\\t\" + \"0.025\\t\" + \"Desalt\\t\" + \"Dry\\t\" + \"None\\t\" + '1']\n    end\n\n    # shows the primer table for if the vendor is Sigma-Aldrich\n    def self.show_primer_table(primer_table)\n      Wrapper.new.show do\n        title 'Create a Sigma-Aldrich DNA oligos order'\n\n        check 'Under \"Products\", click \"Custom DNA Oligos\", and then under \"Standard DNA Oligos\", click \"Order\" under \"Tubes\".'\n        check 'Click \"Upload or Copy \u0026 Paste\".'\n        check 'Copy and paste the following table and click submit.'\n\n        table primer_table\n\n        check 'Click Add to Cart.'\n        check 'Proceed to Check Out.'\n        check 'Click Check Out and confirm the order.'\n      end\n      # TODO: how is order number handled here?\n    end\n\n    def self.order_primers(primers)\n      primer_table = build_primer_table(primers: primers)\n      order_number = show_primer_table(primer_table)\n\n      order_number\n    end\n  end\nend\n"}},{"library":{"name":"Feedback","category":"Standard Libs","code_source":"module Feedback\n  CONTAINER_NAME = \"Feedback (Virtual)\"\n  SAMPLE_TYPE_NAME = \"Operation Feedback\"\n  \n  # This method will prompt the technician to write feedback for the operations\n  # that they complete on each job. This feedback will be associated to an item\n  # that represents each operation type.\n  def get_protocol_feedback\n    \n    # Gets feedback from the user\n    if debug\n      feedback = \"testing for job id\"\n    else\n      feedback = ask_for_feedback\n    end\n    \n    if(!feedback.blank?)\n      associate_feedback feedback\n    end\n    \n    if debug\n      print_association\n    end\n    \n  end\n  \n  # Associates the feedback entered by the lab technician to the OperationType of the protocol\n  # that uses this library.\n  #\n  # @param [String] the feedback entered by the lab technician.\n  def associate_feedback feedback\n    operation = OperationType.find(operation_type.id)\n    feedback = feedback + \"- job #{jid}\"\n  \n    feedback_array = []\n    if(!operation.get(:feedback).nil?)\n      feedback_array = operation.get(:feedback)\n    end\n    feedback_array.push(feedback)\n    operation.associate :feedback, feedback_array\n  end\n  \n  # Debugging method that prints all associations\n  def print_association\n    operation = OperationType.find(operation_type.id)\n    feedback_array = operation.get(:feedback)\n    if feedback_array\n      show do\n        title \"This is printing because debug is on\"\n        note \"#{feedback_array}\"\n      end\n    end\n  end\n  \n  # Returns the feedback entered by a lab technician.\n  #\n  # @return [Hash] the information returned by the feedback show block\n  def ask_for_feedback\n    feedback = show do\n      title \"We want your feedback\"\n      \n      note \"Notice anything weird with this protocol? Tell us below!\"\n      \n      get \"text\", var: \"feedback_user\", label: \"Enter your feedback here\", default: \"\"\n    end\n    feedback[:feedback_user] # return\n  end\n\nend"}},{"library":{"name":"Units","category":"Standard Libs","code_source":"# frozen_string_literal: true\n\nmodule Units\n  # Volume\n  MICROLITERS = 'l'\n  MILLILITERS = 'mL'\n\n  # Weight\n  NANOGRAMS = 'ng'\n\n  # Concentration\n  PICOMOLAR = 'pM'\n  NANOMOLAR = 'nM'\n  MICROMOLAR = 'M'\n  MILLIMOLAR = 'mM'\n  MOLAR = 'M'\n\n  # Temperature\n  DEGREES_C = 'C'\n\n  # Time\n  MINUTES = 'min'\n  SECONDS = 'sec'\n  HOURS = 'hr'\n\n  # Force\n  TIMES_G = 'x g'\n\n  def qty_display(qty)\n    \"#{qty[:qty]} #{qty[:units]}\"\n  end\n\n  def add_qty_display(options)\n    new_items = {}\n\n    options.each do |key, value|\n      key =~ /^(.+_)+([a-z]+)$/\n\n      case Regexp.last_match(2)\n      when 'microliters'\n        units = MICROLITERS\n      when 'milliliters'\n        units = MILLILITERS\n      when 'minutes'\n        units = MINUTES\n      else\n        next\n      end\n\n      qty = value.to_f\n\n      new_items[\"#{Regexp.last_match(1)}qty\".to_sym] = { qty: qty, units: units }\n    end\n\n    options.update(new_items)\n  end\nend\n"}}]}